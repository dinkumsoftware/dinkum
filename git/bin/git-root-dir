#!/bin/bash
# http://github.com/dinkumsoftware/dinkum.git
# git/bin/git-root-dir
#
USAGE=$(cat <<END_OF_USAGE
Usage: git_root_dir <starting-dir-or-file>
 Finds the git root directory of <starting-dir-or-file>
 by looking for a .git directory in one of <starting_dir-or-file>'s
 parent directory.
 On success: prints directory name to stdout and returns 0
 On failure: prints nothing and              and returns 1
END_OF_USAGE
)

# thanks to following for idea:
# http://stackoverflow.com/questions/2044574/determine-if-directory-is-under-git-control

# Algorithm:
#    Look up the filesystem tree from <starting-dir-or-file>
#    until we find a directory that has a directory named .git in it

# Check the command line
PN=$(basename "$0") # Program name for labeling
if (( $# != 1 )) ; then
    echo "$USAGE"
    echo "ERROR: $PN: Wrong number of command line arguments."
    exit 1
fi
STARTING_DIR_OR_FILE="$1"

# Make sure it exists
if [ ! -e "$STARTING_DIR_OR_FILE" ] ; then
    echo "$USAGE"
    echo "ERROR:$PN:Does not exist: $STARTING_DIR_OR_FILE"
    exit 1
fi

# Where we start looking for .git
DIR="$STARTING_DIR_OR_FILE"

# If it is a file ....
if [ -f "$DIR" ] ; then
    # Make it a directory
    DIR=$(dirname "$DIR")
fi

# Look in $DIR for .git, stopping when
# find it.  Quit looking when get to /
while true ; do
    # Make dir an absolute path
    DIR=$(readlink -f "$DIR")

    # We in top level git directory?
    if [ -d "$DIR/.git" ] ; then
        # Yes, success
        echo "$DIR"
        exit 0
    fi

    # Not in top level git directory
    # We at top of filesystem?
    if [ "$DIR" == / ] ; then
        # failed to find .git
        break
    fi

    # Not in /, Look up up one level
    DIR="$DIR/.."
done

# Failed to find top level .git dir
exit 1




