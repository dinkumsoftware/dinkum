https://github.com/dinkumsoftware/dinkum.git
git/git-cheatsheet.txt

Frequently used git commands.

2016-11-21 tc Initial
2016-11-22 tc add Changing state.
2016-11-23 tc add Deleting commits
2016-11-28 tc add How to tell if file under git
2016-11-29 tc how to delete a branch
                                 how to pretty log
2016-12-02 tc Added username/password caching
2016-12-05 tc squashing since last push
2016-12-14 tc git reset --hard HEAD
2017-05-09 tc git merge-base branchA branchB
2017-05-11 tc bunch of additions
2019-11-13 tc Listed some git gui's
2019-11-14 tc moved gui listing to git-tools.txt
2019-11-22 tc Added meld and git-cat-files notes
2020-07-04 tc Added List files changed in a commit:
2021-01-28 tc fixed up rebase instructions
2021-08-18 tc added simple workflow
              Added ssh git clone examples
2021-10-26 tc how to see all history of a file
2021-10-27 tc how to see why file is being ignored
2021-11-03 tc added how to see files changed in a commit.

Table of contents
    *** Creating stuff
    *** Looking at stuff
    *** Changing state
    *** Fixing stuff
    *** Deleting stuff
    *** Publishing Stuff
    *** Determining state
    *** username/password caching
    *** simple workflow
==================================================
*** Creating stuff
# Initial copy of a repo from GitHub
cd parent
    # creates in directory parent/repo
    git clone https://<USERNAME>@github.com/whatever/repo.git      
    git clone git@github.com:dinkumsoftware/repo.git

    # creates in directory parent/DIR
    git clone https://<USERNAME>@github.com/whatever/repo.git  DIR 
    git clone git@github.com:dinkumsoftware/repo.git           DIR


# Create new LOCAL branch based on REMOTE
git branch       LOCAL origin/REMOTE
git checkout -b  LOCAL origin/REMOTE

# Change who you "pull" from
git branch --set-upstream-to origin/REMOTE

*** Looking at stuff
Using meld as a diff viewer
    git difftool <files, etc>

printing a file in git:
    git ver >= 2.24.0 :
        git-cat-file
    otherwise:
        from https://stackoverflow.com/questions/11007552/git-whole-file-to-stdout
        git show HEAD:<file>

See log of all commits since last push:
    git log origin/master..HEAD

To see what files changed in a commit:
    git show --stat <commit-hash>

See full history of a file (even deleted):
https://intellipaat.com/community/9088/git-how-to-find-a-deleted-file-in-the-project-commit-history
    git log --all --full-history -- <path-to-file>  # show the history
    git show <SHA>               -- <path-to-file>  # print a specific one
    git checkout <SHA>^          -- <path-to-file>  # get to working dir
                                                    # The ^ is prior to deletion

See why file/dir is being .gitignore'd
    git check-ignore [<options>] <pathname>...
      -v, --verbose Tell which .gitignore applies

*** Changing state
git add -A .  # stages All in current directory
git add .     # stages new and modified, without deleted
git add -u    # stages modified and deleted, without new

git commit -a # stage modified/deleted (not new) and commit

# Changing the upstream source that branch will pull from.
git branch --set-upstream-to <origin/whatever> [<branchname>] 
                                               # only reqd if not current branch


*** Fixing stuff


# SQUASHING
# squash <N> commits into one
# Do NOT do this after a push
git rebase -i HEAD~<N> ; 1st pick, remainder squash

# squash all commits on a branch
# Thanks to https://makandracards.com/makandra/527-squashing-several-git-commits-into-a-single-commit
# This example squashes all commits on topic-branch.  It's done on another branch for safety in case
# of rebase screwups.
git checkout topic-branch
git checkout -b squashed-topic-branch
git rebase -i master
git checkout master
git merge squashed-topic-branch

    Note: that rebasing to the master does not work if you merged the master into
    your feature branch while you were working on the new feature. If you did this
    you will need to find the original branch point and call git rebase with a SHA1 revision.

# squash all commits since last push
git rebase -i origin/master   ; 1st editor:
                              ;   all but 1st entry: pick==>squash
                              ;   to bail: delete entire editor window
                              ; 2nd editor: make commit msg
                              ; to undo: git rebase --abort

# edit the last commit message
git commit --amend
git commit --amend -m "New commit message"

*** Deleting stuff

# Throw away all uncommitted changes to tracked file in the
# working directory
git reset --hard HEAD

# Delete all untracked files
git clean  

# throwaway the last attempted merge
git merge --abort

# Delete <N> commits
# http://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git
# WARNING! Stash first, deletes working dir changes
git reset --hard HEAD~<N>

# Delete a branch
git branch -d LOCAL    # local branch LOCAL
git push origin --delete REMOTE # Remote branch REMOTE

*** Publishing Stuff
# Local branch is LOCAL

# upstream branch is set and named LOCAL
git push

# upstream branch has a different name
# Want to push to branch of same name
git push origin LOCAL


*** Determining state
# How to tell if file under git control
# http://stackoverflow.com/questions/2405305/how-to-tell-if-a-file-is-git-tracked-by-shell-exit-code
git ls-files <file-name> --error-unmatch  &>>/dev/null  # returns 0 if in git, 1 if not

List files changed in a commit:
Thanks to https://stackoverflow.com/questions/5096268/how-to-get-a-list-of-all-files-that-changed-between-two-git-commits
       git diff --name-only <commit1> <commit2>   # in general
       git diff --name-only <starting SHA> HEAD   # e.g. HEAD~1
       git diff --name-only <starting SHA>        # if you want to include changed-but-not-yet-committed files


# Pretty one line log list
# Thanks to: http://stackoverflow.com/questions/1441010/the-shortest-possible-output-from-git-log-containing-author-and-date
# example output: 2016-11-23 tom campbell    dacf92c   test-socketCAN user interface enhancements.
git log --pretty=format:"%ad %<(15,trunc)%an %<(9,trunc)%h %s" --date=short

# git log useful options
--oneline      Suppress commit message
--name-only    list files that changed in commit
--name-status  list files that changed in commit along with single char status code
                 Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R),
                 have their type (i.e. regular file, symlink, submodule, ...) changed (T)
                 are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). 
--no-merges    suppress printout of commits that are the result of merges (2 parents)

# What is upstream?
git remote show origin
git branch -vv

# See all the files in a commit
git diff-tree  --no-commit-id --name-only -r <SHA1> # Just the names

git show       --pretty=""    --name-only    <SHA1> # names and commit info
git log                       --name-only           #    ditto

# Find out the common ancestor of two different branches
git merge-base branchA branchB


*** username/password caching

This will remember the username for a give repo.  You must supply password
once per session and then it will be remembered forever.

# Remember password in memory for a week
git config --global credential.helper 'cache --timeout=604800'

# If you remember, clone the repo with username in URL
git clone https://<USERNAME>@github.com/whatever/repo.git

# Associate remote USERNAME with a REPO
# Thanks to http://superuser.com/questions/199507/how-do-i-ensure-git-doesnt-ask-me-for-my-github-username-and-password
git config --global url."https://username@github.com/REPO".insteadOf "https://github.com/REPO"


*** simple workflow

; a branch to work on
git checkout -b topic-branch

iterate:
    edit
    git commit

; squash all topic-branch commits to single commit
; (with backup to squashed-topic-branch)
git checkout -b squashed-topic-branch
git rebase -i master

; merge to master
git checkout master
git merge squashed-topic-branch

; tidy up at your leisure
git checkout master
git branch -d squashed-topic-branch
git branch -D topic-branch     ; -D req'd because topic-branch never merged.

    
