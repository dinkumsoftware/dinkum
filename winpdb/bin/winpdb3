#!/bin/bash
# winpdb3
#
# A script to launch winpdb (symbolic python debugger) on a python 3 script.
#
# ASSUMES that winpdb (which could be installed anywhere) is on the path
# Works for winpdb-1.4.8
#
# Usage: winpdb3 SCRIPT
#
# winpdb out of the box (as of this date anyway) doesn't run under python 3
# because the wxPython doesn't run under python 3.
# So following the instructions in
# https://brbsix.github.io/2015/11/19/using-winpdb-to-debug-python-3-applications/
#
# We launch a patched rpdb2 under python 3 and then launch winpdb under python 2
#
# Next bug is that rpdb2 crashes on python 3 due to unknown signal handlers.
# We fix that by patching rpdb2.py.  This script will automatically patch rpdb2.py
# See code for mechanism of patching.

# Winpdb itself can be found:
# http://winpdb.org/

# 2017-03-18 tc@DinkumSoftware.com   Initial

set -u # die on undefined vars and errors
set -e

# Check cmd line args
if [[ $# != 1 ]] ; then
   echo "Wrong number of arguments"
   echo "Usage: winpdb3 SCRIPT"
   exit 1
fi

SCRIPT="$1"

# Find the directory where rpdb2 is installed
# i.e. non-patched copy

# We assume it is on the path
RPDB2_DIR="$(dirname $(which rpdb2))"

# What we are going execute under python3
RPDB2="$(which rpdb2)"

# Deal with patching it.

# Compute checksum of what's on the path,
# The awk removes a trailing filename
SHA1_RPDB2_ON_PATH=$( sha1sum "$RPDB2_DIR/rpdb2.py" | awk '{print $1}' )

# We have a copy of original and patched in:
PATCH_DIR="$(dirname $0)"
PATCH_DIR="$(readlink -f $PATCH_DIR)" # careful of symbolic links
PATCH_DIR+="/../python3-reqd-patches"

# Get their checksums
SHA1_RPDB2_ORIGINAL=$(cat $PATCH_DIR/sha1.rpdb2.py.original)
SHA1_RPDB2_PATCHED=$(cat $PATCH_DIR/sha1.rpdb2.py.patched)

# If unpatched, patch it
if [[ $SHA1_RPDB2_ON_PATH != $SHA1_RPDB2_PATCHED ]] ; then
    # Installed version has NOT been patched
    # Make sure we are starting same original
    if [[ $SHA1_RPDB2_ON_PATH != $SHA1_RPDB2_ORIGINAL ]] ; then
        echo "ERROR: Installed winpdb is NOT same version as"
        echo "       patch was built from."
        exit 1
    else
        # Need to install patch.
        # We just backup the old and copy int new file
        echo
        echo "***********************************************************"
        echo "One time Replacing $RPDB2_DIR/rpdb2.py with patched version"
        echo "***********************************************************"
        echo
        echo
        set -x
        sleep 5
        cp -p $RPDB2_DIR/rpdb2.py  $RPDB2_DIR/rpdb2.py.original
        cp -p $PATCH_DIR/rpdb2.py.patched $RPDB2_DIR/rpdb2.py
        set +x
   fi
fi

# All patching complete.  Execute


# Launch the server side under python 3
# rpdb2 looks for modules in it's directory
export PYTHONPATH="${RPDB2_DIR}:${PYTHONPATH:-''}"
python3 "$RPDB2" --debuggee "$SCRIPT" <<END_OF_PASSWD &
foo
END_OF_PASSWD

# Launch the client side under python 2
winpdb --attach "$SCRIPT" <<END_OF_PASSWD &
foo
END_OF_PASSWD



